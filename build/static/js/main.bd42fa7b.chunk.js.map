{"version":3,"sources":["components/moviePreview.js","img/spinner.svg","utils/getMovies.js","App.js","index.js"],"names":["MoviePreview","movie","imgURL","posterPath","altText","title","className","src","alt","getMovies","a","searchString","axios","get","params","result","data","response","App","useState","search","setSearch","searchResult","setSearchResult","loading","setLoading","error","setError","console","log","process","PORT","useEffect","length","movieResult","fetchData","loadingImg","map","id","placeholder","onChange","event","target","value","autoComplete","defaults","baseURL","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAEe,SAASA,EAAT,GACd,IADuCC,EACxC,EADwCA,MAE9BC,EAAM,yCAAqCD,EAAME,YACjDC,EAAO,gCAA4BH,EAAMI,OAC/C,OACI,qBAAKC,UAAU,eAAf,SACI,qBAAKA,UAAU,eAAeC,IAAKL,EAAQM,IAAKJ,MCR7C,UAA0B,oCCO5BK,EAAS,uCAAG,0CAAAC,EAAA,6DAAOC,EAAP,+BAAsB,GAAtB,kBAIIC,IAAMC,IAAI,gBAAiB,CAC5CC,OAAQ,CACJH,kBANS,cAIXI,EAJW,yBASVA,EAAOC,MATG,sCAaX,KAAMC,SAASD,KAbJ,yDAAH,qDC6DPE,EA7DH,WAEV,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAwCF,mBAAS,MAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA0BN,mBAAS,IAAnC,mBAAOO,EAAP,KAAcC,EAAd,KAEAC,QAAQC,IAAR,4BAAyCC,mIAAYC,MAMrDC,qBAAU,WACV,4CACE,4BAAAtB,EAAA,2DAEMU,EAAOa,OAAS,GAFtB,wDAGER,GAAW,GAHb,kBAO8BhB,EAAUW,GAPxC,OAOUc,EAPV,OAQIX,EAAgBW,GARpB,kDAYIX,EAAgB,MAChBI,EAAS,EAAD,IAbZ,QAeEF,GAAW,GAfb,2DADF,uBAAC,WAAD,wBAmBEU,KACC,CAACf,IAcJ,OACE,sBAAKd,UAAU,YAAf,UACA,qBAAKA,UAAU,OAAf,4DACMkB,GAAW,qBAAKlB,UAAU,sBAAsBC,IAAK6B,EAAY5B,IAAI,kBACjEc,GAAgBA,EAAae,KAAI,SAAApC,GAAK,OAAI,cAACD,EAAD,CAA6BC,MAAOA,GAAjBA,EAAMqC,OAExEZ,GAAS,mBAAGpB,UAAU,WAAWgC,GAAG,QAA3B,SAAoCZ,IAC9C,uBAAOY,GAAG,SAAShC,UAAU,WAAWiC,YAAY,eAAeC,SAdlD,SAACC,GAES,aAA3BA,EAAMC,OAAOpC,YAA0BmC,EAAMC,OAAOpC,UAAY,cACpEe,EAAUoB,EAAMC,OAAOC,OACvBhB,EAAS,KAUwFgB,MAAOvB,EAAQwB,aAAa,YCxDjIhC,IAAMiC,SAASC,QAAU,wBAIzBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bd42fa7b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function MoviePreview ({ movie })\r\n{\r\n    const imgURL = `http://image.tmdb.org/t/p/w342/${movie.posterPath}`;\r\n    const altText = `Poster from the movie ${movie.title}`;\r\n    return (\r\n        <div className=\"moviePreview\">\r\n            <img className=\"previewImage\" src={imgURL} alt={altText} />\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/spinner.e30e831d.svg\";","import axios from \"axios\";\r\n\r\n/**\r\n * Makes server request with given search string\r\n * @param {*} searchString   \r\n * @returns\r\n */\r\nexport const getMovies = async (searchString = \"\") =>\r\n{\r\n    try\r\n    {\r\n        const result = await axios.get(\"/search/movie\", {\r\n            params: {\r\n                searchString\r\n            }\r\n        })\r\n        return result.data;\r\n    }\r\n    catch (error)\r\n    {\r\n        throw error.response.data;\r\n    }\r\n}","import { useState, useEffect } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nimport MoviePreview from \"./components/moviePreview\";\r\nimport loadingImg from \"./img/spinner.svg\";\r\nimport { getMovies } from \"./utils/getMovies\";\r\n\r\nconst App = () =>\r\n{\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  console.log(`Making requests to port: `, process.env.PORT);\r\n  \r\n  /**\r\n   * Runs when search state is changed.\r\n   * Updates searchResult state based on response from server\r\n   */\r\n  useEffect(() =>\r\n  {\r\n    async function fetchData ()\r\n    {\r\n      if (search.length < 1) return;\r\n      setLoading(true);\r\n\r\n      try\r\n      {\r\n        const movieResult = await getMovies(search);\r\n        setSearchResult(movieResult);\r\n      }\r\n      catch (error)\r\n      {\r\n        setSearchResult(null);\r\n        setError(error);\r\n      }\r\n      setLoading(false);\r\n    }\r\n\r\n    fetchData();\r\n  }, [search]);\r\n\r\n  /**\r\n   * Move the search bar to the top if currently centered\r\n   * Sets the search state equal to input value, and clears the error state \r\n   * @param {*} event search field input element\r\n   */\r\n  const searchOnChange = (event) =>\r\n  {\r\n    if (event.target.className === \"centered\") event.target.className = \"search-top\";\r\n    setSearch(event.target.value);\r\n    setError(\"\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n    <div className=\"tmdb\">All movie info is gathered from themoviedb.org</div>\r\n        {(loading && <img className=\"loadingImg centered\" src={loadingImg} alt=\"loading icon\" />)\r\n          || (searchResult && searchResult.map(movie => <MoviePreview key={movie.id} movie={movie} />))\r\n        }\r\n        {error && <p className=\"centered\" id=\"error\">{error}</p>}\r\n        <input id=\"search\" className=\"centered\" placeholder=\"Search Movie\" onChange={searchOnChange} value={search} autoComplete=\"off\"></input>\r\n        {/* <p id=\"attribution\">This product uses the TMDb API but is not endorsed or certified by TMDb.</p> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport axios from \"axios\";\r\n\r\nimport App from './App';\r\n\r\naxios.defaults.baseURL = \"http://localhost:5001\" \r\n/* const port = process.env.PORT || 5001;\r\naxios.defaults.baseURL = `https://movie-buffies.herokuapp.com:${port}`; */\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}