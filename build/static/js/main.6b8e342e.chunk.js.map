{"version":3,"sources":["img/spinner.svg","components/moviePreviewPoster.js","components/searchResult.js","utils/getMovies.js","App.js","index.js"],"names":["MoviePreviewPoster","movie","imgURL","posterPath","altText","title","className","src","alt","SearchResult","searchResult","status","state","error","loadingImg","map","id","getMovies","a","searchString","axios","get","params","result","data","App","useState","setStatus","search","setSearch","setSearchResult","useDebounce","debouncedSearch","useEffect","searchMovies","movieResult","length","placeholder","onChange","event","target","value","autoComplete","defaults","baseURL","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAAe,G,MAAA,IAA0B,qC,OCE1B,SAASA,EAAT,GACd,IAD6CC,EAC9C,EAD8CA,MAEpCC,EAAM,yCAAqCD,EAAME,YACjDC,EAAO,gCAA4BH,EAAMI,OAC/C,OACI,qBAAKC,UAAU,eAAf,SACI,qBAAKA,UAAU,eAAeC,IAAKL,EAAQM,IAAKJ,MCH7C,SAASK,EAAT,GACd,IADuCC,EACxC,EADwCA,aAAcC,EACtD,EADsDA,OAG3CC,EAAgBD,EAAhBC,MAAOC,EAASF,EAATE,MAEd,MAAc,SAAVD,EAGI,KAGW,YAAVA,EAEG,qBAAKN,UAAU,sBAAsBC,IAAKO,EAAYN,IAAI,iBAEpD,aAAVI,EAEIF,EAAaK,KAAI,SAAAd,GAAK,OAAI,cAACD,EAAD,CAAmCC,MAAOA,GAAjBA,EAAMe,OAEnD,UAAVJ,EAEI,mBAAGN,UAAU,WAAWU,GAAG,QAA3B,SAAoCH,SAF3C,ECjBF,IAAMI,EAAS,uCAAG,0CAAAC,EAAA,6DAAOC,EAAP,+BAAsB,GAAtB,kBAIIC,IAAMC,IAAI,gBAAiB,CAC5CC,OAAQ,CACJH,kBANS,cAIXI,EAJW,yBASVA,EAAOC,MATG,sCAcX,uBAdW,yDAAH,qDC0DPC,EAzDH,WAEV,MAA4BC,mBAAS,CAAEd,MAAO,OAAQC,MAAO,OAA7D,mBAAOF,EAAP,KAAegB,EAAf,KACA,EAA4BD,mBAAS,IAArC,mBAAOE,EAAP,KAAeC,EAAf,KACA,EAAwCH,mBAAS,MAAjD,mBAAOhB,EAAP,KAAqBoB,EAArB,KAEA,EAA0BC,YAAYH,EAAQ,KAAvCI,EAAP,oBAOAC,qBAAU,WAER,IAAMC,EAAY,uCAAG,4BAAAhB,EAAA,+EAISD,EAAUe,GAJnB,OAIXG,EAJW,OAKjBL,EAAgBK,GAChBR,EAAU,CAAEf,MAAO,aANF,gDAUjBe,EAAU,CAAEf,MAAO,QAASC,MAAK,OAVhB,yDAAH,qDAcdmB,EAAgBI,OAAS,GAE7BF,MACC,CAACF,IAeJ,OACE,sBAAK1B,UAAU,YAAf,UACE,qBAAKA,UAAU,OAAf,SAAsB,iFACtB,cAACG,EAAD,CAAcC,aAAcA,EAAcC,OAAQA,IAClD,uBAAOK,GAAG,SAASV,UAAU,WAAW+B,YAAY,eAAeC,SAZhD,SAACC,GAES,aAA3BA,EAAMC,OAAOlC,YAA0BiC,EAAMC,OAAOlC,UAAY,cACpEuB,EAAUU,EAAMC,OAAOC,OACU,IAA9BF,EAAMC,OAAOC,MAAML,OAAcT,EAAU,CAACf,MAAO,SACjDe,EAAU,CAAEf,MAAO,aAOuE6B,MAAOb,EAAQc,aAAa,YCpD/HtB,IAAMuB,SAASC,QAAU,wBAEzBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6b8e342e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spinner.e30e831d.svg\";","import React from 'react'\r\n\r\nexport default function MoviePreviewPoster ({ movie })\r\n{\r\n    const imgURL = `http://image.tmdb.org/t/p/w342/${movie.posterPath}`;\r\n    const altText = `Poster from the movie ${movie.title}`;\r\n    return (\r\n        <div className=\"moviePreview\">\r\n            <img className=\"previewImage\" src={imgURL} alt={altText} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport loadingImg from \"./../img/spinner.svg\";\r\nimport MoviePreviewPoster from \"./moviePreviewPoster\";\r\n\r\nexport default function SearchResult ({ searchResult, status })\r\n{\r\n\r\n    const {state, error} = status;    \r\n\r\n    if (state === \"idle\")\r\n    {\r\n        return (\r\n            null\r\n        );\r\n    }\r\n    else if (state === \"pending\")\r\n    {\r\n        return (<img className=\"loadingImg centered\" src={loadingImg} alt=\"loading icon\" />)\r\n    }\r\n    else if(state === \"resolved\")\r\n    {\r\n        return (searchResult.map(movie => <MoviePreviewPoster key={movie.id} movie={movie} />));\r\n    }\r\n    else if(state === \"error\")\r\n    {\r\n        return (<p className=\"centered\" id=\"error\">{error}</p>);\r\n    }\r\n}\r\n","import axios from \"axios\";\r\n\r\n/**\r\n * Makes server request with given search string\r\n * @param {*} searchString   \r\n * @returns\r\n */\r\nexport const getMovies = async (searchString = \"\") =>\r\n{\r\n    try\r\n    {\r\n        const result = await axios.get(\"/search/movie\", {\r\n            params: {\r\n                searchString\r\n            }\r\n        })\r\n        return result.data;\r\n    }\r\n    catch (error)\r\n    {      \r\n        //throw error.response.data;\r\n        throw \"Unable to find movie\";\r\n    }\r\n}","import { useState, useEffect, useCallback } from \"react\";\r\nimport { useDebounce } from \"use-debounce\";\r\nimport \"./styles.css\";\r\n\r\n\r\nimport SearchResult from \"./components/searchResult\";\r\nimport { getMovies } from \"./utils/getMovies\";\r\n\r\nconst App = () =>\r\n{\r\n  const [status, setStatus] = useState({ state: \"idle\", error: null });\r\n  const [search, setSearch] = useState(\"\");  \r\n  const [searchResult, setSearchResult] = useState(null);\r\n\r\n  const [debouncedSearch] = useDebounce(search, 600);\r\n\r\n\r\n  /**\r\n   * Makes server request based on the search string 600ms after the user \r\n   * stops typing. \r\n   */\r\n  useEffect(() =>\r\n  {    \r\n    const searchMovies = async () =>\r\n    {      \r\n      try\r\n      {\r\n        const movieResult = await getMovies(debouncedSearch);\r\n        setSearchResult(movieResult);\r\n        setStatus({ state: \"resolved\" });\r\n      }\r\n      catch (error)\r\n      {\r\n        setStatus({ state: \"error\", error });\r\n      }\r\n    }\r\n    \r\n    if (debouncedSearch.length < 1) return;\r\n\r\n    searchMovies();\r\n  }, [debouncedSearch])\r\n\r\n  /**\r\n   * Move the search bar to the top if currently centered\r\n   * Sets the search state equal to input value, and clears the error state \r\n   * @param {*} event search field input element\r\n   */\r\n  const searchOnChange = (event) =>\r\n  {\r\n    if (event.target.className === \"centered\") event.target.className = \"search-top\";    \r\n    setSearch(event.target.value);\r\n    if(event.target.value.length === 0) setStatus({state: \"idle\"});\r\n    else setStatus({ state: \"pending\" });\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"tmdb\"><p>All movie info is gathered from themoviedb.org</p></div>\r\n      <SearchResult searchResult={searchResult} status={status} />\r\n      <input id=\"search\" className=\"centered\" placeholder=\"Search Movie\" onChange={searchOnChange} value={search} autoComplete=\"off\"></input>\r\n      {/* <p id=\"attribution\">This product uses the TMDb API but is not endorsed or certified by TMDb.</p> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport axios from \"axios\";\r\n\r\nimport App from './App';\r\n\r\n// Only for local development\r\naxios.defaults.baseURL = \"http://localhost:5001\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}